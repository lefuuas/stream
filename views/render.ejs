<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ver Imagens para <%= ip %></title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: #f0f0f0;
      margin: 0;
      padding: 20px;
      color: #333;
    }
    h1 {
      margin-bottom: 20px;
      color: #222; /* Aumentando contraste */
    }
    .images {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }
    .images img {
      max-width: 1000px;
      margin: 10px;
      border: 2px solid #4caf50;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .terminal {
      background-color: #1e1e1e; /* Aumentando contraste */
      color: #ffffff; /* Aumentando contraste */
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
      width: 600px;
      max-width: 100%;
      max-height: 400px;
      overflow-y: auto;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .input-container {
      display: flex;
      margin-top: 10px;
      align-items: center;
    }
    .input-container input {
      flex: 1;
      padding: 10px;
      border: 2px solid #4caf50; /* Aumentando contraste */
      border-radius: 5px;
      font-size: 14px;
      color: #333; /* Aumentando contraste */
      background-color: #fff; /* Aumentando contraste */
    }
    .input-container input::placeholder {
      color: #666; /* Aumentando contraste */
    }
    .button {
      background-color: #2f6d31; /* Aumentando contraste */
      border: none;
      color: white;
      padding: 10px 20px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 14px;
      margin-left: 10px;
      cursor: pointer;
      border-radius: 5px;
    }
    .button:hover {
      background-color: #45a049;
    }
    .status {
      margin-left: 10px;
      padding: 10px;
      border-radius: 5px;
      font-size: 14px;
      color: #fff;
    }
    .status-success {
      background-color: #4caf50;
    }
    .status-fail {
      background-color: #f44336;
    }
  </style>
</head>
<body>
  <h1>Imagens para <%= ip %></h1>
  <div class="images">
    <img id="renderImage" src="/render-image/<%= ip %>" alt="Imagem Renderizada para <%= ip %>">
  </div>
  <div class="terminal" id="terminal" aria-live="polite">
    <div id="terminalOutput">A saída do terminal aparecerá aqui...</div>
    <div class="input-container">
      <label for="commandInput" class="visually-hidden">Digite um comando</label>
      <input type="text" id="commandInput" placeholder="Digite um comando:  ">
      <button class="button" onclick="executeCommand()">Executar</button>
      <button class="button" onclick="clearConsole()">Limpar</button>
      <div id="commandStatus" class="status"></div>
    </div>
  </div>
  <script>
    function updateImage() {
      var img = document.getElementById('renderImage');
      var newImg = new Image();
      newImg.onload = function() {
        img.src = newImg.src;
      };
      newImg.src = '/render-image/<%= ip %>?' + new Date().getTime();
    }
    
    setInterval(updateImage, 1000);
    updateImage();
    
    function executeCommand() {
      var commandInput = document.getElementById('commandInput');
      var command = commandInput.value;
      console.log('Executando comando:', command);
      commandInput.value = '';
      fetch('/send-command', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ cmd: command })
      })
      .then(response => {
        var commandStatus = document.getElementById('commandStatus');
        if (response.ok) {
          console.log('Comando enviado com sucesso.');
          commandStatus.textContent = 'Comando executado com sucesso';
          commandStatus.className = 'status status-success';
          var terminalOutput = document.getElementById('terminalOutput');
          terminalOutput.innerHTML += '<div>$ ' + command + '</div>';
        } else {
          console.error('Falha ao enviar comando:', response.statusText);
          commandStatus.textContent = 'Falha ao executar comando';
          commandStatus.className = 'status status-fail';
        }
      })
      .catch(error => {
        console.error('Erro ao enviar comando:', error);
        var commandStatus = document.getElementById('commandStatus');
        commandStatus.textContent = 'Erro ao enviar comando';
        commandStatus.className = 'status status-fail';
      });
    }
    
    function clearConsole() {
      var terminalOutput = document.getElementById('terminalOutput');
      terminalOutput.innerHTML = '';
    }
    
    function appendToTerminal(output) {
      var terminalOutput = document.getElementById('terminalOutput');
      terminalOutput.innerHTML += '<div>' + output + '</div>';
      terminalOutput.scrollTop = terminalOutput.scrollHeight;
    }
    
    function fetchResults() {
      fetch('/result-executed')
      .then(response => {
        if (response.ok) {
          return response.text();
        } else {
          throw new Error('Falha ao buscar resultado');
        }
      })
      .then(result => {
        if (result) {
          console.log('Resultado recebido:', result);
          appendToTerminal(result);
        }
      })
      .catch(error => console.error('Erro ao buscar resultado:', error))
      .finally(() => setTimeout(fetchResults, 1000));
    }
    
    fetchResults();
  </script>
</body>
</html>
